generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  gates_access  GatesAccess[]
  info          UserInfo?
  events        GateAccessEvent[]
}

model UserInfo {
  id Int @id @default(autoincrement())

  userId        String  @unique
  firstName     String
  lastName      String
  building      Int
  apartment     Int
  phonenumber   String?
  requested_gateId Int?

  user          User @relation(fields: [userId], references: [id])
  requestedGate Gate?   @relation(fields: [requested_gateId], references: [id])

  @@index([phonenumber])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Gate {
  id           Int           @id @default(autoincrement())
  name         String?       @db.VarChar(255)
  entity_id    String?       @db.VarChar(255)
  gates_access GatesAccess[]
  RequestedBy  UserInfo[]
  events       GateAccessEvent[]

  @@map("gates")
}

model GatesAccess {
  gate_id Int
  user_id String

  gates Gate @relation(fields: [gate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([gate_id, user_id])
  @@map("gates_access")
}

model GateAccessEvent {
  id         String   @id @default(cuid())
  source     String
  type       String

  gate_id    Int
  user_id    String
  created_at DateTime @default(now())

  users User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  gates Gate @relation(fields: [gate_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@map("access_events")
}
